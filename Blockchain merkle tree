import hashlib

class Block:
    def __init__(self, data1,data2,data3, previous_hash):
        self.data1= data1
        self.data2= data2
        self.data3= data3
        self.previous_hash = previous_hash
        self.hash = self.calculate_hash()

    def calculate_hash(self):
        return hashlib.sha256((str(self.data1) + str(self.previous_hash)+str(self.data2)+str(self.data3) ).encode()).hexdigest()

def build_merkle_tree(blocks):
    merkle_tree = []

    for block in blocks:
        merkle_tree.append(block.hash)

    while len(merkle_tree) > 1:
        temp_merkle_tree = []

        for i in range(0, len(merkle_tree), 2):
            hash_pair = merkle_tree[i] + merkle_tree[i + 1] if i + 1 < len(merkle_tree) else merkle_tree[i]
            temp_merkle_tree.append(hashlib.sha256(hash_pair.encode()).hexdigest())

        merkle_tree = temp_merkle_tree

    return merkle_tree[0]

def main():
    L1 =['BLK/0000000000000000000000000000000000000000000000000000000000000000/TXN-Vivek-Kumar-300/TXN-Kumar-Vivek-100/TXN-Vivek-Vivek-100/0/d15201403aa9bbe00591c9e32e91fab5d58b3504739699110e49dfce1ea61622']
    w = L1[0].split("/")
    if w[0] =='BLK':
        block1=Block(w[2],w[3],w[4],w[1])
    L2 =['BLK/0000000000000000000000000000000000000000000000000000000000000001/TXN-Vivek-Kumar-301/TXN-Kumar-Vivek-102/TXN-Vivek-Vivek-103/0/d15201403aa9bbe00591c9e32e91fab5d58b3504739699110e49dfce1ea61622']
    w2 = L1[0].split("/")
    if w2[0] =='BLK':
        block2=Block(w2[2],w2[3],w2[4],w2[1])
    L3 =['BLK/0000000000000000000000000000000000000000000000000000000000000001/TXN-Vivek-Kumar-305/TXN-Kumar-Vivek-107/TXN-Vivek-Vivek-109/0/d15201403aa9bbe00591c9e32e91fab5d58b3504739699110e49dfce1ea61622']
    w3 = L1[0].split("/")
    if w[0] =='BLK':
        block3=Block(w3[2],w3[3],w3[4],w3[1])




    # Simulate branching by setting the same previous hash for blocks 2, 3, and 4
    block2.previous_hash = block3.previous_hash = block1.hash

    # Create a list of blocks
    blocks = [block1, block2,block3]

    # Build the Merkle Tree
    merkle_root = build_merkle_tree(blocks)

    # Display Merkle Root
    print(f"Merkle Root: {merkle_root}")

    # Identify where the branching occurs in the Merkle Tree
    for i, block in enumerate(blocks):
        if i > 0 and block.previous_hash == blocks[i - 1].hash:
            print(f"Branching occurs at Block {i + 1}: {block.hash}")

if __name__== "__main__":
    main()
